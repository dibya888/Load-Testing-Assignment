/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1299.0, "minX": 0.0, "maxY": 93258.0, "series": [{"data": [[0.0, 1299.0], [0.1, 1319.0], [0.2, 1332.0], [0.3, 1332.0], [0.4, 1437.0], [0.5, 1511.0], [0.6, 1566.0], [0.7, 1594.0], [0.8, 1727.0], [0.9, 1740.0], [1.0, 1741.0], [1.1, 1746.0], [1.2, 2176.0], [1.3, 2286.0], [1.4, 2286.0], [1.5, 2328.0], [1.6, 2347.0], [1.7, 2357.0], [1.8, 2381.0], [1.9, 2429.0], [2.0, 2490.0], [2.1, 2506.0], [2.2, 2603.0], [2.3, 2648.0], [2.4, 2677.0], [2.5, 2677.0], [2.6, 2832.0], [2.7, 2865.0], [2.8, 2876.0], [2.9, 2881.0], [3.0, 2926.0], [3.1, 2971.0], [3.2, 2974.0], [3.3, 3046.0], [3.4, 3174.0], [3.5, 3230.0], [3.6, 3321.0], [3.7, 3442.0], [3.8, 3526.0], [3.9, 3558.0], [4.0, 3660.0], [4.1, 3706.0], [4.2, 3767.0], [4.3, 3804.0], [4.4, 3951.0], [4.5, 4035.0], [4.6, 4039.0], [4.7, 4056.0], [4.8, 4157.0], [4.9, 4245.0], [5.0, 4285.0], [5.1, 4293.0], [5.2, 4299.0], [5.3, 4308.0], [5.4, 4326.0], [5.5, 4341.0], [5.6, 4348.0], [5.7, 4406.0], [5.8, 4578.0], [5.9, 4676.0], [6.0, 4757.0], [6.1, 4811.0], [6.2, 4812.0], [6.3, 4834.0], [6.4, 4853.0], [6.5, 4874.0], [6.6, 4987.0], [6.7, 5093.0], [6.8, 5105.0], [6.9, 5129.0], [7.0, 5167.0], [7.1, 5179.0], [7.2, 5212.0], [7.3, 5214.0], [7.4, 5222.0], [7.5, 5227.0], [7.6, 5251.0], [7.7, 5306.0], [7.8, 5345.0], [7.9, 5350.0], [8.0, 5351.0], [8.1, 5465.0], [8.2, 5542.0], [8.3, 5549.0], [8.4, 5555.0], [8.5, 5580.0], [8.6, 5599.0], [8.7, 5673.0], [8.8, 5702.0], [8.9, 5821.0], [9.0, 5860.0], [9.1, 5942.0], [9.2, 5954.0], [9.3, 6040.0], [9.4, 6049.0], [9.5, 6113.0], [9.6, 6125.0], [9.7, 6362.0], [9.8, 6405.0], [9.9, 6456.0], [10.0, 6479.0], [10.1, 6593.0], [10.2, 6697.0], [10.3, 6708.0], [10.4, 6848.0], [10.5, 6917.0], [10.6, 6935.0], [10.7, 6979.0], [10.8, 7002.0], [10.9, 7118.0], [11.0, 7132.0], [11.1, 7148.0], [11.2, 7155.0], [11.3, 7210.0], [11.4, 7311.0], [11.5, 7361.0], [11.6, 7584.0], [11.7, 7809.0], [11.8, 7840.0], [11.9, 7984.0], [12.0, 7991.0], [12.1, 8064.0], [12.2, 8112.0], [12.3, 8397.0], [12.4, 8581.0], [12.5, 8726.0], [12.6, 8844.0], [12.7, 8871.0], [12.8, 8926.0], [12.9, 9005.0], [13.0, 9013.0], [13.1, 9045.0], [13.2, 9389.0], [13.3, 9454.0], [13.4, 9714.0], [13.5, 10598.0], [13.6, 10772.0], [13.7, 12062.0], [13.8, 12721.0], [13.9, 12873.0], [14.0, 12904.0], [14.1, 13042.0], [14.2, 13387.0], [14.3, 13522.0], [14.4, 13612.0], [14.5, 13843.0], [14.6, 13926.0], [14.7, 14082.0], [14.8, 14189.0], [14.9, 14215.0], [15.0, 14580.0], [15.1, 14621.0], [15.2, 14794.0], [15.3, 14892.0], [15.4, 14980.0], [15.5, 15014.0], [15.6, 15154.0], [15.7, 15539.0], [15.8, 15557.0], [15.9, 15584.0], [16.0, 15625.0], [16.1, 15635.0], [16.2, 15670.0], [16.3, 15696.0], [16.4, 15703.0], [16.5, 15750.0], [16.6, 15771.0], [16.7, 15803.0], [16.8, 15850.0], [16.9, 15880.0], [17.0, 15890.0], [17.1, 15891.0], [17.2, 15916.0], [17.3, 15944.0], [17.4, 15994.0], [17.5, 16051.0], [17.6, 16073.0], [17.7, 16191.0], [17.8, 16334.0], [17.9, 16378.0], [18.0, 16386.0], [18.1, 16410.0], [18.2, 16505.0], [18.3, 16565.0], [18.4, 16605.0], [18.5, 16610.0], [18.6, 16640.0], [18.7, 16774.0], [18.8, 16818.0], [18.9, 16860.0], [19.0, 16901.0], [19.1, 16927.0], [19.2, 16927.0], [19.3, 16946.0], [19.4, 16996.0], [19.5, 17057.0], [19.6, 17146.0], [19.7, 17235.0], [19.8, 17268.0], [19.9, 17350.0], [20.0, 17460.0], [20.1, 17613.0], [20.2, 17615.0], [20.3, 17651.0], [20.4, 17660.0], [20.5, 17673.0], [20.6, 17758.0], [20.7, 17834.0], [20.8, 18004.0], [20.9, 18158.0], [21.0, 18267.0], [21.1, 18268.0], [21.2, 18380.0], [21.3, 18606.0], [21.4, 18663.0], [21.5, 18729.0], [21.6, 18841.0], [21.7, 18843.0], [21.8, 18887.0], [21.9, 18933.0], [22.0, 18936.0], [22.1, 19036.0], [22.2, 19047.0], [22.3, 19069.0], [22.4, 19073.0], [22.5, 19230.0], [22.6, 19298.0], [22.7, 19363.0], [22.8, 19371.0], [22.9, 19434.0], [23.0, 19453.0], [23.1, 19459.0], [23.2, 19467.0], [23.3, 19470.0], [23.4, 19479.0], [23.5, 19533.0], [23.6, 19537.0], [23.7, 19567.0], [23.8, 19569.0], [23.9, 19601.0], [24.0, 19601.0], [24.1, 19647.0], [24.2, 19654.0], [24.3, 19731.0], [24.4, 19902.0], [24.5, 19929.0], [24.6, 19974.0], [24.7, 20021.0], [24.8, 20046.0], [24.9, 20087.0], [25.0, 20125.0], [25.1, 20144.0], [25.2, 20146.0], [25.3, 20148.0], [25.4, 20208.0], [25.5, 20349.0], [25.6, 20416.0], [25.7, 20418.0], [25.8, 20434.0], [25.9, 20435.0], [26.0, 20437.0], [26.1, 20520.0], [26.2, 20531.0], [26.3, 20627.0], [26.4, 20642.0], [26.5, 20785.0], [26.6, 20794.0], [26.7, 20811.0], [26.8, 20858.0], [26.9, 20876.0], [27.0, 21006.0], [27.1, 21007.0], [27.2, 21036.0], [27.3, 21043.0], [27.4, 21045.0], [27.5, 21045.0], [27.6, 21045.0], [27.7, 21055.0], [27.8, 21062.0], [27.9, 21153.0], [28.0, 21156.0], [28.1, 21160.0], [28.2, 21164.0], [28.3, 21325.0], [28.4, 21325.0], [28.5, 21327.0], [28.6, 21345.0], [28.7, 21380.0], [28.8, 21384.0], [28.9, 21503.0], [29.0, 21531.0], [29.1, 21540.0], [29.2, 21558.0], [29.3, 21574.0], [29.4, 21587.0], [29.5, 21638.0], [29.6, 21649.0], [29.7, 21653.0], [29.8, 21655.0], [29.9, 21714.0], [30.0, 21754.0], [30.1, 21762.0], [30.2, 21786.0], [30.3, 21829.0], [30.4, 21879.0], [30.5, 21887.0], [30.6, 21888.0], [30.7, 21891.0], [30.8, 21896.0], [30.9, 21902.0], [31.0, 21919.0], [31.1, 21999.0], [31.2, 22010.0], [31.3, 22050.0], [31.4, 22050.0], [31.5, 22098.0], [31.6, 22103.0], [31.7, 22158.0], [31.8, 22206.0], [31.9, 22218.0], [32.0, 22251.0], [32.1, 22266.0], [32.2, 22278.0], [32.3, 22295.0], [32.4, 22307.0], [32.5, 22345.0], [32.6, 22365.0], [32.7, 22366.0], [32.8, 22388.0], [32.9, 22389.0], [33.0, 22394.0], [33.1, 22424.0], [33.2, 22440.0], [33.3, 22477.0], [33.4, 22496.0], [33.5, 22503.0], [33.6, 22513.0], [33.7, 22546.0], [33.8, 22615.0], [33.9, 22630.0], [34.0, 22699.0], [34.1, 22754.0], [34.2, 22755.0], [34.3, 22757.0], [34.4, 22770.0], [34.5, 22772.0], [34.6, 22778.0], [34.7, 22810.0], [34.8, 22846.0], [34.9, 22857.0], [35.0, 22874.0], [35.1, 22903.0], [35.2, 22928.0], [35.3, 22950.0], [35.4, 22966.0], [35.5, 23001.0], [35.6, 23023.0], [35.7, 23072.0], [35.8, 23097.0], [35.9, 23099.0], [36.0, 23100.0], [36.1, 23127.0], [36.2, 23149.0], [36.3, 23168.0], [36.4, 23275.0], [36.5, 23282.0], [36.6, 23314.0], [36.7, 23321.0], [36.8, 23334.0], [36.9, 23394.0], [37.0, 23524.0], [37.1, 23590.0], [37.2, 23654.0], [37.3, 23701.0], [37.4, 23722.0], [37.5, 23726.0], [37.6, 23809.0], [37.7, 23829.0], [37.8, 23861.0], [37.9, 23893.0], [38.0, 23954.0], [38.1, 24015.0], [38.2, 24038.0], [38.3, 24115.0], [38.4, 24135.0], [38.5, 24140.0], [38.6, 24215.0], [38.7, 24274.0], [38.8, 24276.0], [38.9, 24414.0], [39.0, 24433.0], [39.1, 24509.0], [39.2, 24555.0], [39.3, 24569.0], [39.4, 24578.0], [39.5, 24637.0], [39.6, 24643.0], [39.7, 24655.0], [39.8, 24666.0], [39.9, 24683.0], [40.0, 24693.0], [40.1, 24694.0], [40.2, 24716.0], [40.3, 24756.0], [40.4, 24780.0], [40.5, 24845.0], [40.6, 24909.0], [40.7, 24973.0], [40.8, 24990.0], [40.9, 25000.0], [41.0, 25001.0], [41.1, 25026.0], [41.2, 25030.0], [41.3, 25049.0], [41.4, 25067.0], [41.5, 25081.0], [41.6, 25104.0], [41.7, 25121.0], [41.8, 25269.0], [41.9, 25322.0], [42.0, 25322.0], [42.1, 25376.0], [42.2, 25445.0], [42.3, 25525.0], [42.4, 25578.0], [42.5, 25598.0], [42.6, 25650.0], [42.7, 25661.0], [42.8, 25670.0], [42.9, 25705.0], [43.0, 25714.0], [43.1, 25722.0], [43.2, 25727.0], [43.3, 25762.0], [43.4, 25771.0], [43.5, 25782.0], [43.6, 25782.0], [43.7, 25803.0], [43.8, 25831.0], [43.9, 25875.0], [44.0, 25941.0], [44.1, 25956.0], [44.2, 25969.0], [44.3, 26025.0], [44.4, 26060.0], [44.5, 26134.0], [44.6, 26183.0], [44.7, 26202.0], [44.8, 26263.0], [44.9, 26315.0], [45.0, 26316.0], [45.1, 26329.0], [45.2, 26373.0], [45.3, 26386.0], [45.4, 26395.0], [45.5, 26395.0], [45.6, 26410.0], [45.7, 26472.0], [45.8, 26496.0], [45.9, 26512.0], [46.0, 26534.0], [46.1, 26563.0], [46.2, 26590.0], [46.3, 26616.0], [46.4, 26634.0], [46.5, 26634.0], [46.6, 26643.0], [46.7, 26660.0], [46.8, 26666.0], [46.9, 26671.0], [47.0, 26717.0], [47.1, 26767.0], [47.2, 26774.0], [47.3, 26805.0], [47.4, 26843.0], [47.5, 26849.0], [47.6, 26868.0], [47.7, 26874.0], [47.8, 26888.0], [47.9, 26890.0], [48.0, 26911.0], [48.1, 26938.0], [48.2, 26970.0], [48.3, 27002.0], [48.4, 27038.0], [48.5, 27061.0], [48.6, 27063.0], [48.7, 27066.0], [48.8, 27086.0], [48.9, 27088.0], [49.0, 27101.0], [49.1, 27117.0], [49.2, 27130.0], [49.3, 27135.0], [49.4, 27136.0], [49.5, 27138.0], [49.6, 27151.0], [49.7, 27280.0], [49.8, 27301.0], [49.9, 27308.0], [50.0, 27345.0], [50.1, 27352.0], [50.2, 27364.0], [50.3, 27401.0], [50.4, 27451.0], [50.5, 27462.0], [50.6, 27499.0], [50.7, 27545.0], [50.8, 27565.0], [50.9, 27580.0], [51.0, 27615.0], [51.1, 27630.0], [51.2, 27634.0], [51.3, 27641.0], [51.4, 27644.0], [51.5, 27653.0], [51.6, 27657.0], [51.7, 27664.0], [51.8, 27694.0], [51.9, 27709.0], [52.0, 27730.0], [52.1, 27807.0], [52.2, 27817.0], [52.3, 27822.0], [52.4, 27826.0], [52.5, 27851.0], [52.6, 27879.0], [52.7, 27897.0], [52.8, 27915.0], [52.9, 27951.0], [53.0, 27981.0], [53.1, 28001.0], [53.2, 28014.0], [53.3, 28018.0], [53.4, 28050.0], [53.5, 28102.0], [53.6, 28102.0], [53.7, 28121.0], [53.8, 28124.0], [53.9, 28139.0], [54.0, 28185.0], [54.1, 28221.0], [54.2, 28224.0], [54.3, 28225.0], [54.4, 28243.0], [54.5, 28304.0], [54.6, 28353.0], [54.7, 28353.0], [54.8, 28381.0], [54.9, 28420.0], [55.0, 28450.0], [55.1, 28473.0], [55.2, 28508.0], [55.3, 28520.0], [55.4, 28563.0], [55.5, 28628.0], [55.6, 28687.0], [55.7, 28689.0], [55.8, 28724.0], [55.9, 28726.0], [56.0, 28726.0], [56.1, 28755.0], [56.2, 28758.0], [56.3, 28771.0], [56.4, 28822.0], [56.5, 28825.0], [56.6, 28834.0], [56.7, 28903.0], [56.8, 28977.0], [56.9, 28981.0], [57.0, 29120.0], [57.1, 29123.0], [57.2, 29141.0], [57.3, 29185.0], [57.4, 29253.0], [57.5, 29301.0], [57.6, 29310.0], [57.7, 29318.0], [57.8, 29319.0], [57.9, 29320.0], [58.0, 29324.0], [58.1, 29338.0], [58.2, 29462.0], [58.3, 29496.0], [58.4, 29510.0], [58.5, 29527.0], [58.6, 29536.0], [58.7, 29537.0], [58.8, 29687.0], [58.9, 29698.0], [59.0, 29699.0], [59.1, 29729.0], [59.2, 29736.0], [59.3, 29770.0], [59.4, 29786.0], [59.5, 29789.0], [59.6, 29791.0], [59.7, 29793.0], [59.8, 29804.0], [59.9, 29828.0], [60.0, 29892.0], [60.1, 30047.0], [60.2, 30054.0], [60.3, 30060.0], [60.4, 30071.0], [60.5, 30136.0], [60.6, 30193.0], [60.7, 30207.0], [60.8, 30213.0], [60.9, 30270.0], [61.0, 30286.0], [61.1, 30290.0], [61.2, 30341.0], [61.3, 30344.0], [61.4, 30361.0], [61.5, 30369.0], [61.6, 30378.0], [61.7, 30404.0], [61.8, 30419.0], [61.9, 30421.0], [62.0, 30429.0], [62.1, 30441.0], [62.2, 30445.0], [62.3, 30515.0], [62.4, 30537.0], [62.5, 30576.0], [62.6, 30597.0], [62.7, 30616.0], [62.8, 30621.0], [62.9, 30649.0], [63.0, 30681.0], [63.1, 30691.0], [63.2, 30733.0], [63.3, 30840.0], [63.4, 30877.0], [63.5, 30925.0], [63.6, 30926.0], [63.7, 30961.0], [63.8, 31030.0], [63.9, 31061.0], [64.0, 31120.0], [64.1, 31120.0], [64.2, 31153.0], [64.3, 31156.0], [64.4, 31194.0], [64.5, 31224.0], [64.6, 31272.0], [64.7, 31288.0], [64.8, 31290.0], [64.9, 31294.0], [65.0, 31303.0], [65.1, 31380.0], [65.2, 31387.0], [65.3, 31423.0], [65.4, 31427.0], [65.5, 31487.0], [65.6, 31489.0], [65.7, 31494.0], [65.8, 31498.0], [65.9, 31498.0], [66.0, 31505.0], [66.1, 31555.0], [66.2, 31568.0], [66.3, 31585.0], [66.4, 31628.0], [66.5, 31633.0], [66.6, 31659.0], [66.7, 31697.0], [66.8, 31700.0], [66.9, 31707.0], [67.0, 31727.0], [67.1, 31777.0], [67.2, 31800.0], [67.3, 31806.0], [67.4, 31809.0], [67.5, 31828.0], [67.6, 31844.0], [67.7, 31850.0], [67.8, 31859.0], [67.9, 31922.0], [68.0, 31923.0], [68.1, 31925.0], [68.2, 31938.0], [68.3, 31982.0], [68.4, 32019.0], [68.5, 32040.0], [68.6, 32065.0], [68.7, 32124.0], [68.8, 32151.0], [68.9, 32176.0], [69.0, 32189.0], [69.1, 32240.0], [69.2, 32268.0], [69.3, 32314.0], [69.4, 32334.0], [69.5, 32346.0], [69.6, 32388.0], [69.7, 32409.0], [69.8, 32448.0], [69.9, 32462.0], [70.0, 32471.0], [70.1, 32507.0], [70.2, 32544.0], [70.3, 32549.0], [70.4, 32596.0], [70.5, 32633.0], [70.6, 32634.0], [70.7, 32635.0], [70.8, 32645.0], [70.9, 32658.0], [71.0, 32661.0], [71.1, 32666.0], [71.2, 32680.0], [71.3, 32694.0], [71.4, 32728.0], [71.5, 32738.0], [71.6, 32740.0], [71.7, 32765.0], [71.8, 32766.0], [71.9, 32770.0], [72.0, 32794.0], [72.1, 32799.0], [72.2, 32810.0], [72.3, 32816.0], [72.4, 32843.0], [72.5, 32850.0], [72.6, 32874.0], [72.7, 32899.0], [72.8, 32929.0], [72.9, 32950.0], [73.0, 32959.0], [73.1, 32978.0], [73.2, 33047.0], [73.3, 33068.0], [73.4, 33069.0], [73.5, 33081.0], [73.6, 33089.0], [73.7, 33104.0], [73.8, 33106.0], [73.9, 33142.0], [74.0, 33180.0], [74.1, 33185.0], [74.2, 33193.0], [74.3, 33213.0], [74.4, 33223.0], [74.5, 33228.0], [74.6, 33256.0], [74.7, 33290.0], [74.8, 33312.0], [74.9, 33319.0], [75.0, 33340.0], [75.1, 33362.0], [75.2, 33472.0], [75.3, 33515.0], [75.4, 33520.0], [75.5, 33524.0], [75.6, 33526.0], [75.7, 33529.0], [75.8, 33551.0], [75.9, 33567.0], [76.0, 33588.0], [76.1, 33591.0], [76.2, 33627.0], [76.3, 33686.0], [76.4, 33688.0], [76.5, 33750.0], [76.6, 33763.0], [76.7, 33824.0], [76.8, 33847.0], [76.9, 33852.0], [77.0, 33874.0], [77.1, 33875.0], [77.2, 33875.0], [77.3, 33881.0], [77.4, 33905.0], [77.5, 33966.0], [77.6, 33971.0], [77.7, 34001.0], [77.8, 34023.0], [77.9, 34033.0], [78.0, 34036.0], [78.1, 34050.0], [78.2, 34083.0], [78.3, 34104.0], [78.4, 34107.0], [78.5, 34109.0], [78.6, 34118.0], [78.7, 34154.0], [78.8, 34188.0], [78.9, 34201.0], [79.0, 34212.0], [79.1, 34228.0], [79.2, 34252.0], [79.3, 34275.0], [79.4, 34295.0], [79.5, 34297.0], [79.6, 34307.0], [79.7, 34318.0], [79.8, 34322.0], [79.9, 34329.0], [80.0, 34333.0], [80.1, 34336.0], [80.2, 34339.0], [80.3, 34339.0], [80.4, 34342.0], [80.5, 34371.0], [80.6, 34373.0], [80.7, 34428.0], [80.8, 34443.0], [80.9, 34476.0], [81.0, 34500.0], [81.1, 34557.0], [81.2, 34584.0], [81.3, 34601.0], [81.4, 34617.0], [81.5, 34624.0], [81.6, 34643.0], [81.7, 34688.0], [81.8, 34703.0], [81.9, 34712.0], [82.0, 34716.0], [82.1, 34717.0], [82.2, 34722.0], [82.3, 34743.0], [82.4, 34775.0], [82.5, 34798.0], [82.6, 34818.0], [82.7, 34828.0], [82.8, 34837.0], [82.9, 34848.0], [83.0, 34848.0], [83.1, 34882.0], [83.2, 34923.0], [83.3, 34963.0], [83.4, 34982.0], [83.5, 35018.0], [83.6, 35033.0], [83.7, 35105.0], [83.8, 35118.0], [83.9, 35120.0], [84.0, 35126.0], [84.1, 35136.0], [84.2, 35172.0], [84.3, 35186.0], [84.4, 35201.0], [84.5, 35206.0], [84.6, 35346.0], [84.7, 35371.0], [84.8, 35383.0], [84.9, 35530.0], [85.0, 35551.0], [85.1, 35608.0], [85.2, 35667.0], [85.3, 35672.0], [85.4, 35685.0], [85.5, 35695.0], [85.6, 35700.0], [85.7, 35727.0], [85.8, 35785.0], [85.9, 35826.0], [86.0, 35838.0], [86.1, 35840.0], [86.2, 35872.0], [86.3, 35872.0], [86.4, 35930.0], [86.5, 35957.0], [86.6, 36076.0], [86.7, 36098.0], [86.8, 36104.0], [86.9, 36144.0], [87.0, 36202.0], [87.1, 36229.0], [87.2, 36246.0], [87.3, 36304.0], [87.4, 36316.0], [87.5, 36344.0], [87.6, 36441.0], [87.7, 36488.0], [87.8, 36604.0], [87.9, 36615.0], [88.0, 36627.0], [88.1, 36631.0], [88.2, 36687.0], [88.3, 36746.0], [88.4, 36759.0], [88.5, 36846.0], [88.6, 36852.0], [88.7, 37036.0], [88.8, 37143.0], [88.9, 37188.0], [89.0, 37261.0], [89.1, 37280.0], [89.2, 37382.0], [89.3, 37412.0], [89.4, 37456.0], [89.5, 37475.0], [89.6, 37751.0], [89.7, 37856.0], [89.8, 37861.0], [89.9, 37907.0], [90.0, 38024.0], [90.1, 38109.0], [90.2, 38146.0], [90.3, 38407.0], [90.4, 38415.0], [90.5, 38490.0], [90.6, 38495.0], [90.7, 38677.0], [90.8, 38703.0], [90.9, 38731.0], [91.0, 38897.0], [91.1, 38898.0], [91.2, 39466.0], [91.3, 39499.0], [91.4, 39659.0], [91.5, 41873.0], [91.6, 41952.0], [91.7, 42306.0], [91.8, 42745.0], [91.9, 42910.0], [92.0, 42973.0], [92.1, 42978.0], [92.2, 42991.0], [92.3, 43005.0], [92.4, 43017.0], [92.5, 43051.0], [92.6, 43055.0], [92.7, 43126.0], [92.8, 43276.0], [92.9, 43282.0], [93.0, 43326.0], [93.1, 43339.0], [93.2, 43356.0], [93.3, 43374.0], [93.4, 43400.0], [93.5, 43409.0], [93.6, 43483.0], [93.7, 43488.0], [93.8, 43499.0], [93.9, 43515.0], [94.0, 43550.0], [94.1, 43629.0], [94.2, 43686.0], [94.3, 43708.0], [94.4, 43738.0], [94.5, 43910.0], [94.6, 43914.0], [94.7, 43924.0], [94.8, 43963.0], [94.9, 44022.0], [95.0, 44180.0], [95.1, 44216.0], [95.2, 44252.0], [95.3, 44384.0], [95.4, 44469.0], [95.5, 44484.0], [95.6, 44491.0], [95.7, 44526.0], [95.8, 44533.0], [95.9, 44568.0], [96.0, 44581.0], [96.1, 44616.0], [96.2, 44635.0], [96.3, 44669.0], [96.4, 44759.0], [96.5, 44871.0], [96.6, 44923.0], [96.7, 44933.0], [96.8, 44973.0], [96.9, 45110.0], [97.0, 45135.0], [97.1, 45316.0], [97.2, 45367.0], [97.3, 45376.0], [97.4, 45440.0], [97.5, 45579.0], [97.6, 45717.0], [97.7, 45812.0], [97.8, 45813.0], [97.9, 45914.0], [98.0, 45993.0], [98.1, 46082.0], [98.2, 46301.0], [98.3, 47314.0], [98.4, 47500.0], [98.5, 48157.0], [98.6, 48683.0], [98.7, 48762.0], [98.8, 49039.0], [98.9, 49264.0], [99.0, 49435.0], [99.1, 49512.0], [99.2, 52461.0], [99.3, 52495.0], [99.4, 52940.0], [99.5, 58692.0], [99.6, 66374.0], [99.7, 69910.0], [99.8, 80824.0], [99.9, 93258.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1200.0, "maxY": 11.0, "series": [{"data": [[69900.0, 1.0], [34100.0, 6.0], [32900.0, 4.0], [33300.0, 5.0], [33700.0, 2.0], [34500.0, 3.0], [34900.0, 3.0], [35300.0, 3.0], [35700.0, 3.0], [36100.0, 2.0], [37700.0, 1.0], [37300.0, 1.0], [38100.0, 2.0], [42900.0, 4.0], [44500.0, 4.0], [43300.0, 4.0], [43700.0, 2.0], [44900.0, 3.0], [44100.0, 1.0], [45300.0, 3.0], [45700.0, 1.0], [48100.0, 1.0], [47300.0, 1.0], [52900.0, 1.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 1.0], [1500.0, 3.0], [1700.0, 4.0], [2100.0, 1.0], [2300.0, 4.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 4.0], [2800.0, 4.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 1.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 1.0], [4300.0, 4.0], [4200.0, 4.0], [4400.0, 1.0], [4600.0, 1.0], [4500.0, 1.0], [4800.0, 5.0], [4700.0, 1.0], [5100.0, 4.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 5.0], [5300.0, 4.0], [5500.0, 5.0], [5400.0, 1.0], [5600.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [5900.0, 2.0], [6100.0, 2.0], [6000.0, 2.0], [6300.0, 1.0], [6400.0, 3.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6900.0, 3.0], [6800.0, 1.0], [7100.0, 4.0], [7000.0, 1.0], [7200.0, 1.0], [7300.0, 2.0], [7500.0, 1.0], [7900.0, 2.0], [7800.0, 2.0], [8000.0, 1.0], [8100.0, 1.0], [8700.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8800.0, 2.0], [9000.0, 3.0], [8900.0, 1.0], [9400.0, 1.0], [9700.0, 1.0], [9300.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [13300.0, 1.0], [13000.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13800.0, 1.0], [13500.0, 1.0], [13600.0, 1.0], [14100.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14000.0, 1.0], [14800.0, 1.0], [14600.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15100.0, 1.0], [15000.0, 1.0], [14900.0, 1.0], [15700.0, 3.0], [15800.0, 5.0], [15600.0, 4.0], [15500.0, 3.0], [16000.0, 2.0], [16300.0, 3.0], [16100.0, 1.0], [15900.0, 3.0], [16600.0, 3.0], [17200.0, 2.0], [17400.0, 1.0], [16400.0, 1.0], [16800.0, 2.0], [17000.0, 1.0], [17600.0, 5.0], [18200.0, 2.0], [18000.0, 1.0], [17800.0, 1.0], [18600.0, 2.0], [19000.0, 4.0], [18800.0, 3.0], [19400.0, 6.0], [19200.0, 2.0], [20000.0, 3.0], [20400.0, 5.0], [19600.0, 4.0], [20200.0, 1.0], [20800.0, 3.0], [20600.0, 2.0], [21000.0, 9.0], [22400.0, 4.0], [21600.0, 4.0], [21800.0, 6.0], [22200.0, 6.0], [22000.0, 4.0], [22600.0, 3.0], [22800.0, 4.0], [23200.0, 2.0], [23000.0, 5.0], [23800.0, 4.0], [24200.0, 3.0], [24000.0, 2.0], [23600.0, 1.0], [24400.0, 2.0], [25000.0, 7.0], [24600.0, 7.0], [24800.0, 1.0], [25400.0, 1.0], [25200.0, 1.0], [25800.0, 3.0], [26000.0, 2.0], [25600.0, 3.0], [26600.0, 7.0], [26200.0, 2.0], [26400.0, 3.0], [26800.0, 7.0], [27000.0, 7.0], [27600.0, 9.0], [27400.0, 4.0], [27200.0, 1.0], [27800.0, 7.0], [28000.0, 4.0], [28200.0, 4.0], [28600.0, 3.0], [28400.0, 3.0], [28800.0, 3.0], [29400.0, 2.0], [29600.0, 3.0], [29200.0, 1.0], [30200.0, 5.0], [30000.0, 4.0], [30400.0, 6.0], [30600.0, 5.0], [29800.0, 3.0], [31000.0, 2.0], [31200.0, 5.0], [31400.0, 7.0], [30800.0, 2.0], [31600.0, 4.0], [31800.0, 7.0], [32200.0, 2.0], [32400.0, 4.0], [32000.0, 3.0], [32600.0, 9.0], [32800.0, 6.0], [33200.0, 5.0], [34000.0, 6.0], [34800.0, 6.0], [34400.0, 3.0], [33600.0, 3.0], [35600.0, 5.0], [35200.0, 2.0], [36000.0, 2.0], [36800.0, 2.0], [36400.0, 2.0], [37200.0, 2.0], [38800.0, 2.0], [38400.0, 4.0], [38000.0, 1.0], [39600.0, 1.0], [43600.0, 2.0], [44400.0, 3.0], [43200.0, 2.0], [44000.0, 1.0], [44800.0, 1.0], [46000.0, 1.0], [49200.0, 1.0], [52400.0, 2.0], [80800.0, 1.0], [66300.0, 1.0], [33100.0, 6.0], [33500.0, 9.0], [34300.0, 11.0], [34700.0, 8.0], [33900.0, 3.0], [35100.0, 7.0], [35500.0, 2.0], [36300.0, 3.0], [35900.0, 2.0], [36700.0, 2.0], [37100.0, 2.0], [37900.0, 1.0], [38700.0, 2.0], [41900.0, 1.0], [42300.0, 1.0], [42700.0, 1.0], [43900.0, 4.0], [43100.0, 1.0], [43500.0, 2.0], [44700.0, 1.0], [44300.0, 1.0], [45100.0, 2.0], [46300.0, 1.0], [45500.0, 1.0], [45900.0, 2.0], [48700.0, 1.0], [47500.0, 1.0], [49500.0, 1.0], [17300.0, 1.0], [16700.0, 1.0], [16900.0, 4.0], [16500.0, 2.0], [17100.0, 1.0], [17700.0, 1.0], [18100.0, 1.0], [18300.0, 1.0], [19300.0, 2.0], [18900.0, 2.0], [18700.0, 1.0], [20100.0, 4.0], [19500.0, 4.0], [19900.0, 3.0], [20300.0, 1.0], [19700.0, 1.0], [21500.0, 6.0], [21100.0, 4.0], [20700.0, 2.0], [20500.0, 2.0], [21300.0, 6.0], [22300.0, 7.0], [21700.0, 4.0], [22100.0, 2.0], [21900.0, 3.0], [22500.0, 3.0], [22900.0, 4.0], [23100.0, 4.0], [22700.0, 6.0], [23300.0, 4.0], [23500.0, 2.0], [24100.0, 3.0], [23700.0, 3.0], [24500.0, 4.0], [23900.0, 1.0], [24700.0, 3.0], [25300.0, 3.0], [25500.0, 3.0], [24900.0, 3.0], [25100.0, 2.0], [25700.0, 8.0], [25900.0, 3.0], [26300.0, 7.0], [26100.0, 2.0], [26500.0, 4.0], [27100.0, 7.0], [26700.0, 3.0], [26900.0, 3.0], [27300.0, 5.0], [27500.0, 3.0], [27900.0, 3.0], [28500.0, 3.0], [28100.0, 6.0], [27700.0, 2.0], [28300.0, 4.0], [28700.0, 6.0], [28900.0, 3.0], [29300.0, 7.0], [29100.0, 4.0], [29500.0, 4.0], [29700.0, 7.0], [30500.0, 4.0], [30300.0, 5.0], [30100.0, 2.0], [30700.0, 1.0], [31300.0, 3.0], [31700.0, 4.0], [30900.0, 3.0], [31100.0, 5.0], [31500.0, 4.0], [31900.0, 5.0], [32300.0, 4.0], [32700.0, 8.0], [32100.0, 4.0], [32500.0, 4.0], [33000.0, 5.0], [34600.0, 5.0], [34200.0, 7.0], [33800.0, 7.0], [33400.0, 1.0], [35000.0, 2.0], [35800.0, 5.0], [36600.0, 5.0], [36200.0, 3.0], [37000.0, 1.0], [37400.0, 3.0], [37800.0, 2.0], [38600.0, 1.0], [39400.0, 2.0], [41800.0, 1.0], [43000.0, 4.0], [43400.0, 5.0], [44600.0, 3.0], [44200.0, 2.0], [45800.0, 2.0], [45400.0, 1.0], [49000.0, 1.0], [48600.0, 1.0], [49400.0, 1.0], [58600.0, 1.0], [93200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 93200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 986.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 986.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.70197158E12, "maxY": 785.1629629629629, "series": [{"data": [[1.70197164E12, 366.03017832647515], [1.70197158E12, 785.1629629629629], [1.7019717E12, 1.0]], "isOverall": false, "label": "Railway E-Ticketing System", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7019717E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2429.0, "minX": 1.0, "maxY": 93258.0, "series": [{"data": [[2.0, 80824.0], [3.0, 69910.0], [4.0, 66374.0], [5.0, 58692.0], [6.0, 52940.0], [7.0, 52461.0], [8.0, 52495.0], [9.0, 47500.0], [10.0, 49264.0], [11.0, 47314.0], [12.0, 49512.0], [13.0, 48683.0], [14.0, 49039.0], [15.0, 49435.0], [16.0, 48157.0], [17.0, 45717.0], [18.0, 45440.0], [19.0, 45993.0], [20.0, 48762.0], [21.0, 44384.0], [22.0, 45914.0], [23.0, 44973.0], [24.0, 42991.0], [25.0, 45579.0], [26.0, 46301.0], [27.0, 45376.0], [28.0, 46082.0], [29.0, 45812.0], [30.0, 44923.0], [31.0, 44635.0], [33.0, 45135.0], [32.0, 43924.0], [35.0, 44252.0], [34.0, 45316.0], [37.0, 45110.0], [36.0, 44581.0], [39.0, 44871.0], [38.0, 43499.0], [41.0, 43550.0], [40.0, 45813.0], [43.0, 45367.0], [42.0, 43282.0], [45.0, 44533.0], [44.0, 44526.0], [47.0, 44180.0], [46.0, 43914.0], [49.0, 44759.0], [48.0, 43339.0], [51.0, 44933.0], [50.0, 43738.0], [53.0, 43515.0], [52.0, 44022.0], [55.0, 43326.0], [54.0, 43686.0], [57.0, 43417.0], [59.0, 44216.0], [58.0, 43055.0], [61.0, 44484.0], [60.0, 44669.0], [63.0, 43374.0], [62.0, 43409.0], [67.0, 43005.0], [66.0, 44491.0], [65.0, 43276.0], [64.0, 43017.0], [71.0, 44469.0], [70.0, 43483.0], [69.0, 43910.0], [68.0, 44616.0], [75.0, 43400.0], [74.0, 43629.0], [73.0, 44568.0], [72.0, 43356.0], [79.0, 43051.0], [78.0, 43488.0], [77.0, 43963.0], [76.0, 42973.0], [83.0, 42910.0], [82.0, 38897.0], [81.0, 42745.0], [80.0, 42978.0], [87.0, 41873.0], [86.0, 38490.0], [85.0, 38703.0], [84.0, 38677.0], [91.0, 41952.0], [90.0, 42306.0], [89.0, 38415.0], [88.0, 38495.0], [95.0, 38024.0], [94.0, 39499.0], [93.0, 38146.0], [92.0, 37856.0], [99.0, 38407.0], [98.0, 37412.0], [97.0, 38731.0], [96.0, 36759.0], [103.0, 35957.0], [102.0, 36344.0], [101.0, 39659.0], [100.0, 39466.0], [107.0, 35727.0], [106.0, 36746.0], [105.0, 38109.0], [104.0, 38898.0], [111.0, 34336.0], [109.0, 37188.0], [108.0, 37861.0], [115.0, 36316.0], [114.0, 36104.0], [113.0, 34330.0], [119.0, 37280.0], [118.0, 36076.0], [117.0, 36229.0], [116.0, 36627.0], [123.0, 34107.0], [122.0, 34154.0], [121.0, 37456.0], [120.0, 34329.0], [127.0, 36246.0], [126.0, 34617.0], [125.0, 35136.0], [124.0, 34624.0], [135.0, 37382.0], [134.0, 36441.0], [133.0, 35206.0], [132.0, 35930.0], [131.0, 34601.0], [130.0, 35872.0], [129.0, 33874.0], [128.0, 37907.0], [143.0, 37143.0], [142.0, 36631.0], [141.0, 34923.0], [140.0, 35346.0], [139.0, 37751.0], [138.0, 37475.0], [137.0, 36202.0], [136.0, 35530.0], [151.0, 36852.0], [150.0, 34557.0], [149.0, 34837.0], [148.0, 33688.0], [147.0, 36604.0], [146.0, 36615.0], [145.0, 34336.0], [144.0, 37036.0], [159.0, 36846.0], [158.0, 37261.0], [157.0, 36488.0], [156.0, 33627.0], [155.0, 33824.0], [154.0, 33966.0], [153.0, 33319.0], [152.0, 35872.0], [167.0, 35608.0], [166.0, 34963.0], [165.0, 33852.0], [164.0, 36687.0], [163.0, 33686.0], [162.0, 35383.0], [161.0, 34371.0], [160.0, 35785.0], [175.0, 36144.0], [174.0, 34001.0], [173.0, 34212.0], [172.0, 36098.0], [171.0, 35695.0], [170.0, 34848.0], [169.0, 32950.0], [168.0, 34339.0], [183.0, 33526.0], [182.0, 35838.0], [181.0, 36304.0], [180.0, 33905.0], [179.0, 34050.0], [178.0, 35700.0], [177.0, 33520.0], [176.0, 35126.0], [191.0, 35672.0], [190.0, 34848.0], [189.0, 33881.0], [188.0, 35551.0], [187.0, 33223.0], [186.0, 35371.0], [185.0, 34703.0], [184.0, 34373.0], [199.0, 32816.0], [198.0, 35201.0], [197.0, 34957.5], [195.0, 34716.0], [194.0, 33847.0], [193.0, 34828.0], [192.0, 35840.0], [207.0, 35105.0], [206.0, 33228.0], [205.0, 33875.0], [204.0, 33591.0], [203.0, 32680.0], [202.0, 34717.0], [201.0, 35205.0], [215.0, 34297.0], [214.0, 34882.0], [213.0, 34252.0], [212.0, 35118.0], [211.0, 32409.0], [210.0, 35685.0], [209.0, 32874.0], [208.0, 32151.0], [223.0, 31628.0], [222.0, 35186.0], [221.0, 32766.0], [220.0, 32810.0], [219.0, 33472.0], [218.0, 32471.0], [217.0, 34083.0], [216.0, 34798.0], [231.0, 31777.0], [230.0, 34118.0], [229.0, 32633.0], [228.0, 33551.0], [227.0, 34104.0], [226.0, 35120.0], [225.0, 34712.0], [224.0, 33750.0], [239.0, 35033.0], [238.0, 34228.0], [237.0, 31487.0], [236.0, 34500.0], [235.0, 34643.0], [234.0, 33185.0], [233.0, 35018.0], [232.0, 34275.0], [247.0, 35667.0], [246.0, 34982.0], [245.0, 31938.0], [244.0, 32799.0], [243.0, 33708.0], [241.0, 34476.0], [240.0, 32019.0], [255.0, 32740.0], [254.0, 32549.0], [253.0, 33312.0], [252.0, 31498.0], [251.0, 31120.0], [250.0, 32596.0], [249.0, 34428.0], [248.0, 31585.0], [270.0, 33213.0], [271.0, 33362.0], [269.0, 31727.0], [268.0, 34188.0], [267.0, 31922.0], [266.0, 34033.0], [265.0, 32124.0], [264.0, 33971.0], [263.0, 31697.0], [256.0, 34443.0], [259.0, 32770.0], [258.0, 32861.0], [262.0, 32507.0], [261.0, 34818.0], [260.0, 32544.0], [286.0, 32899.0], [276.0, 17541.0], [277.0, 34775.0], [279.0, 31555.0], [273.0, 33180.0], [272.0, 31844.0], [275.0, 31925.0], [274.0, 32240.0], [278.0, 33069.0], [287.0, 31806.0], [285.0, 33875.0], [284.0, 34307.0], [283.0, 32959.0], [282.0, 32635.0], [281.0, 33588.0], [280.0, 32666.0], [289.0, 22902.666666666668], [293.0, 17702.0], [292.0, 17810.5], [294.0, 16463.0], [295.0, 33106.0], [303.0, 32658.0], [296.0, 31290.0], [302.0, 31272.0], [301.0, 34201.0], [300.0, 32002.5], [291.0, 33366.0], [290.0, 32929.0], [298.0, 33529.0], [297.0, 32645.0], [318.0, 30441.0], [307.0, 16508.0], [306.0, 32978.0], [305.0, 32189.0], [304.0, 34688.0], [311.0, 31633.0], [310.0, 33081.0], [309.0, 32843.0], [308.0, 32728.0], [319.0, 31800.0], [317.0, 31568.0], [316.0, 33524.0], [315.0, 32176.0], [314.0, 32634.0], [313.0, 30193.0], [312.0, 31828.0], [335.0, 33142.0], [329.0, 17837.5], [334.0, 33089.0], [333.0, 33047.0], [332.0, 32765.0], [323.0, 30445.0], [322.0, 32738.0], [321.0, 33256.0], [320.0, 30961.0], [331.0, 33290.0], [330.0, 33193.0], [328.0, 31809.0], [327.0, 32462.0], [326.0, 31303.0], [325.0, 30926.0], [324.0, 33515.0], [351.0, 30515.0], [345.0, 11254.333333333334], [350.0, 32314.0], [349.0, 31156.0], [348.0, 30369.0], [339.0, 31494.0], [338.0, 30270.0], [337.0, 33567.0], [336.0, 33068.0], [347.0, 31700.0], [346.0, 30047.0], [344.0, 32040.0], [343.0, 32794.0], [342.0, 30404.0], [341.0, 31120.0], [340.0, 33104.0], [366.0, 29892.0], [353.0, 15763.5], [359.0, 16043.5], [352.0, 30060.0], [358.0, 29804.0], [357.0, 30840.0], [356.0, 31153.0], [367.0, 29324.0], [365.0, 32065.0], [364.0, 32388.0], [355.0, 32661.0], [354.0, 31288.0], [363.0, 29253.0], [362.0, 29318.0], [361.0, 30616.0], [360.0, 29462.0], [382.0, 28724.0], [372.0, 16575.0], [375.0, 29152.5], [369.0, 30134.5], [371.0, 30649.0], [370.0, 29770.0], [373.0, 32334.0], [383.0, 30925.0], [381.0, 32448.0], [380.0, 30344.0], [379.0, 32850.0], [378.0, 31194.0], [377.0, 30877.0], [376.0, 31859.0], [398.0, 29527.0], [399.0, 31380.0], [397.0, 28353.0], [396.0, 29510.0], [395.0, 31498.0], [394.0, 30361.0], [393.0, 31982.0], [392.0, 31707.0], [391.0, 29793.0], [385.0, 32268.0], [384.0, 30419.0], [387.0, 29338.0], [386.0, 30576.0], [390.0, 28822.0], [389.0, 29828.0], [388.0, 31850.0], [414.0, 29698.0], [415.0, 28121.0], [413.0, 28304.0], [412.0, 30691.0], [411.0, 28689.0], [410.0, 28758.0], [409.0, 30378.0], [408.0, 29729.0], [407.0, 30213.0], [401.0, 31387.0], [400.0, 28353.0], [403.0, 31923.0], [402.0, 31294.0], [406.0, 27897.0], [405.0, 30136.0], [404.0, 30290.0], [430.0, 29687.0], [431.0, 26767.0], [429.0, 27879.0], [428.0, 29123.0], [427.0, 30597.0], [426.0, 30681.0], [425.0, 27038.0], [424.0, 30207.0], [423.0, 31030.0], [417.0, 31224.0], [416.0, 30071.0], [419.0, 27308.0], [418.0, 29791.0], [422.0, 27657.0], [421.0, 31061.0], [420.0, 29301.0], [446.0, 28224.0], [447.0, 30286.0], [445.0, 30054.0], [444.0, 29537.0], [443.0, 30421.0], [442.0, 29699.0], [441.0, 28981.0], [440.0, 29320.0], [439.0, 27280.0], [433.0, 28381.0], [432.0, 30621.0], [435.0, 28755.0], [434.0, 30537.0], [438.0, 27977.5], [436.0, 29310.0], [462.0, 28771.0], [454.0, 15226.0], [453.0, 28243.0], [452.0, 28520.0], [455.0, 27565.0], [449.0, 28450.0], [448.0, 26874.0], [451.0, 29141.0], [450.0, 28825.0], [463.0, 28563.0], [461.0, 27981.0], [460.0, 29496.0], [459.0, 27066.0], [458.0, 28139.0], [457.0, 27915.0], [456.0, 28102.0], [478.0, 27807.0], [471.0, 14829.0], [465.0, 14837.5], [464.0, 26395.0], [467.0, 27941.0], [468.0, 14322.0], [470.0, 28185.0], [469.0, 28977.0], [479.0, 28473.0], [473.0, 28420.0], [472.0, 27135.0], [477.0, 27644.0], [476.0, 28903.0], [475.0, 27345.0], [474.0, 29789.0], [494.0, 26316.0], [485.0, 15060.5], [484.0, 10259.333333333332], [486.0, 14969.5], [487.0, 28018.0], [483.0, 29736.0], [482.0, 26590.0], [481.0, 27826.0], [480.0, 27694.0], [495.0, 26849.0], [488.0, 27545.0], [493.0, 26183.0], [492.0, 28178.0], [490.0, 26774.0], [489.0, 27709.0], [510.0, 27851.0], [511.0, 25001.0], [509.0, 28628.0], [508.0, 26634.0], [507.0, 28687.0], [506.0, 27664.0], [505.0, 26496.0], [504.0, 26666.0], [503.0, 25762.0], [497.0, 26472.0], [496.0, 27817.0], [499.0, 27138.0], [498.0, 27117.0], [502.0, 27634.0], [501.0, 27580.0], [500.0, 28001.0], [540.0, 15020.5], [521.0, 2429.0], [520.0, 25322.0], [522.0, 25235.0], [524.0, 27462.0], [523.0, 26843.0], [525.0, 11350.333333333334], [542.0, 2603.0], [543.0, 27051.5], [529.0, 25104.0], [528.0, 27063.0], [531.0, 26868.0], [530.0, 25269.0], [533.0, 25727.0], [532.0, 25081.0], [535.0, 28014.0], [534.0, 27641.0], [541.0, 27822.0], [539.0, 26534.0], [538.0, 25121.0], [537.0, 24694.0], [536.0, 27061.0], [527.0, 28102.0], [519.0, 27088.0], [518.0, 28834.0], [517.0, 27451.0], [516.0, 26938.0], [515.0, 26025.0], [514.0, 27401.0], [513.0, 25670.0], [512.0, 28050.0], [526.0, 28221.0], [572.0, 27352.0], [550.0, 13649.0], [549.0, 28508.0], [548.0, 25875.0], [547.0, 24578.0], [546.0, 25026.0], [545.0, 26671.0], [544.0, 27136.0], [551.0, 24655.0], [559.0, 27951.0], [558.0, 26911.0], [557.0, 24637.0], [556.0, 24973.0], [555.0, 26888.0], [554.0, 26329.0], [553.0, 25000.0], [552.0, 25771.0], [575.0, 24683.0], [561.0, 25661.0], [560.0, 26805.0], [563.0, 23829.0], [562.0, 25969.0], [565.0, 24716.0], [564.0, 25803.0], [567.0, 26410.0], [566.0, 26634.0], [574.0, 26970.0], [573.0, 23893.0], [571.0, 24215.0], [570.0, 27130.0], [569.0, 24038.0], [568.0, 26616.0], [604.0, 22389.0], [578.0, 14981.0], [583.0, 14885.5], [582.0, 24414.0], [581.0, 25782.0], [580.0, 23524.0], [579.0, 26060.0], [601.0, 25376.0], [600.0, 23275.0], [588.0, 13190.0], [591.0, 22903.0], [577.0, 26643.0], [576.0, 23954.0], [590.0, 26315.0], [589.0, 27151.0], [587.0, 14821.5], [586.0, 26202.0], [585.0, 23722.0], [584.0, 26373.0], [607.0, 24509.0], [592.0, 26395.0], [594.0, 23099.0], [593.0, 25030.0], [597.0, 23601.5], [595.0, 26660.0], [599.0, 23654.0], [598.0, 26512.0], [606.0, 22778.0], [605.0, 23168.0], [603.0, 23590.0], [602.0, 23097.0], [615.0, 12758.5], [636.0, 14110.0], [610.0, 14483.0], [609.0, 25722.0], [608.0, 22630.0], [612.0, 24643.0], [611.0, 22365.0], [614.0, 26386.0], [613.0, 24015.0], [623.0, 21879.0], [622.0, 25956.0], [621.0, 22513.0], [620.0, 25650.0], [619.0, 24693.0], [618.0, 23100.0], [617.0, 25067.0], [616.0, 22103.0], [624.0, 12401.5], [627.0, 23321.0], [626.0, 24385.0], [629.0, 25445.0], [628.0, 22345.0], [631.0, 22496.0], [630.0, 25525.0], [635.0, 12665.5], [639.0, 22440.0], [638.0, 22098.0], [637.0, 24555.0], [634.0, 25831.0], [633.0, 25598.0], [632.0, 25705.0], [664.0, 21325.0], [669.0, 24780.0], [656.0, 12972.0], [658.0, 21655.0], [657.0, 23001.0], [661.0, 23314.0], [660.0, 23284.0], [671.0, 22266.0], [670.0, 21043.0], [668.0, 22503.0], [667.0, 21558.0], [666.0, 21050.0], [655.0, 22950.0], [640.0, 22278.0], [642.0, 23726.0], [641.0, 21887.0], [644.0, 21649.0], [643.0, 21999.0], [647.0, 22857.0], [646.0, 21729.5], [654.0, 25782.0], [653.0, 25322.0], [652.0, 22251.0], [651.0, 24274.0], [650.0, 25578.0], [649.0, 24569.0], [648.0, 24845.0], [663.0, 21045.0], [662.0, 21045.0], [701.0, 21587.0], [682.0, 12665.0], [681.0, 20642.0], [680.0, 22366.0], [684.0, 22754.0], [683.0, 21896.0], [686.0, 22206.0], [685.0, 21327.0], [696.0, 20520.0], [679.0, 23149.0], [678.0, 23701.0], [677.0, 21325.0], [676.0, 22874.0], [675.0, 21160.0], [674.0, 22842.5], [672.0, 22394.0], [687.0, 22755.0], [690.0, 14287.5], [689.0, 22050.0], [688.0, 23023.0], [691.0, 21380.0], [693.0, 21345.0], [692.0, 23072.0], [695.0, 20794.0], [694.0, 21384.0], [703.0, 21754.0], [702.0, 20418.0], [700.0, 21653.0], [699.0, 21062.0], [698.0, 21007.0], [697.0, 21036.0], [732.0, 20435.0], [714.0, 12672.0], [713.0, 20208.0], [712.0, 21164.0], [715.0, 22846.0], [717.0, 22158.0], [716.0, 22772.0], [719.0, 21156.0], [705.0, 21574.0], [704.0, 22699.0], [707.0, 22050.0], [706.0, 24115.0], [709.0, 22295.0], [708.0, 24135.0], [711.0, 23282.0], [710.0, 22810.0], [718.0, 20876.0], [735.0, 19647.0], [721.0, 19731.0], [720.0, 22477.0], [723.0, 19929.0], [722.0, 19902.0], [725.0, 20046.0], [724.0, 24276.0], [727.0, 19654.0], [726.0, 20858.0], [734.0, 21762.0], [733.0, 19537.0], [731.0, 21714.0], [730.0, 22218.0], [729.0, 21006.0], [728.0, 24140.0], [764.0, 18936.0], [739.0, 9820.666666666668], [749.0, 12071.5], [748.0, 20125.0], [747.0, 22424.0], [746.0, 21638.0], [745.0, 20349.0], [744.0, 20531.0], [751.0, 19467.0], [736.0, 19601.0], [738.0, 22388.0], [737.0, 22615.0], [750.0, 20087.0], [767.0, 18843.0], [752.0, 20416.0], [754.0, 19533.0], [753.0, 20785.0], [757.0, 21132.0], [755.0, 23127.0], [759.0, 21503.0], [758.0, 19230.0], [766.0, 21531.0], [765.0, 21153.0], [763.0, 19069.0], [762.0, 18606.0], [761.0, 19434.0], [760.0, 19974.0], [743.0, 20146.0], [742.0, 22307.0], [741.0, 19470.0], [740.0, 19453.0], [794.0, 18004.0], [798.0, 16927.0], [772.0, 11703.0], [779.0, 10964.0], [778.0, 17460.0], [777.0, 19047.0], [776.0, 18841.0], [781.0, 18729.0], [780.0, 19569.0], [783.0, 19073.0], [769.0, 18887.0], [768.0, 19459.0], [771.0, 19601.0], [770.0, 17651.0], [782.0, 19567.0], [787.0, 10892.5], [791.0, 10470.0], [790.0, 18663.0], [789.0, 20144.0], [788.0, 20021.0], [799.0, 18380.0], [784.0, 20148.0], [786.0, 17350.0], [785.0, 18933.0], [797.0, 17673.0], [796.0, 20811.0], [795.0, 16605.0], [793.0, 20627.0], [792.0, 16860.0], [775.0, 19036.0], [774.0, 20434.0], [773.0, 19479.0], [828.0, 17660.0], [831.0, 10060.0], [817.0, 15994.0], [816.0, 16386.0], [819.0, 16610.0], [818.0, 16410.0], [821.0, 15696.0], [820.0, 15750.0], [830.0, 18267.0], [829.0, 18158.0], [827.0, 15944.0], [826.0, 15890.0], [825.0, 14980.0], [824.0, 15916.0], [815.0, 15557.0], [801.0, 17146.0], [800.0, 17057.0], [803.0, 16505.0], [802.0, 16565.0], [805.0, 15771.0], [804.0, 16996.0], [807.0, 15880.0], [806.0, 16818.0], [814.0, 19363.0], [813.0, 16996.5], [811.0, 16073.0], [810.0, 16946.0], [809.0, 15670.0], [808.0, 17268.0], [823.0, 16640.0], [822.0, 15584.0], [856.0, 8559.0], [838.0, 9119.5], [839.0, 17758.0], [847.0, 14215.0], [833.0, 15014.0], [832.0, 15539.0], [835.0, 15891.0], [834.0, 15635.0], [837.0, 15154.0], [836.0, 16334.0], [845.0, 9460.5], [844.0, 14794.0], [843.0, 13612.0], [842.0, 17613.0], [841.0, 17235.0], [840.0, 16774.0], [846.0, 8480.0], [851.0, 10188.5], [852.0, 10071.5], [853.0, 15703.0], [855.0, 7828.333333333334], [854.0, 14621.0], [863.0, 12062.0], [848.0, 15625.0], [850.0, 13926.0], [849.0, 15803.0], [862.0, 12721.0], [861.0, 13387.0], [860.0, 13042.0], [859.0, 13843.0], [858.0, 14189.0], [857.0, 13522.0], [889.0, 6979.0], [893.0, 7118.0], [865.0, 7502.0], [879.0, 6181.5], [864.0, 10772.0], [878.0, 8112.0], [877.0, 8726.0], [876.0, 8871.0], [875.0, 8397.0], [874.0, 8844.0], [873.0, 8581.0], [872.0, 9013.0], [883.0, 5966.0], [882.0, 7824.5], [880.0, 7984.0], [885.0, 7311.0], [884.0, 7991.0], [887.0, 6917.0], [886.0, 7155.0], [895.0, 6848.0], [894.0, 7132.0], [892.0, 7002.0], [891.0, 7210.0], [890.0, 7148.0], [888.0, 7361.0], [871.0, 9005.0], [870.0, 8926.0], [869.0, 9045.0], [868.0, 9454.0], [867.0, 9714.0], [866.0, 9389.0], [924.0, 5214.0], [927.0, 5167.0], [913.0, 5580.0], [912.0, 5821.0], [915.0, 5542.0], [914.0, 5549.0], [917.0, 5465.0], [916.0, 5673.0], [926.0, 5227.0], [925.0, 5350.0], [923.0, 5555.0], [922.0, 5251.0], [921.0, 5306.0], [920.0, 5179.0], [911.0, 5942.0], [897.0, 6935.0], [896.0, 6697.0], [899.0, 6593.0], [898.0, 6708.0], [901.0, 6479.0], [900.0, 6456.0], [903.0, 6362.0], [902.0, 6405.0], [910.0, 5702.0], [909.0, 5954.0], [908.0, 6113.0], [907.0, 5860.0], [906.0, 6040.0], [905.0, 6125.0], [904.0, 6049.0], [919.0, 5599.0], [918.0, 5345.0], [941.0, 4578.0], [931.0, 4764.5], [930.0, 5093.0], [929.0, 5212.0], [928.0, 5351.0], [933.0, 4987.0], [932.0, 4812.0], [940.0, 4811.0], [939.0, 4834.0], [938.0, 4757.0], [937.0, 5129.0], [936.0, 4874.0], [935.0, 5222.0], [934.0, 5105.0], [1.0, 93258.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[478.83100000000024, 26036.125999999993]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 941.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2.066666666666667, "minX": 1.70197158E12, "maxY": 3813371.85, "series": [{"data": [[1.70197164E12, 3813371.85], [1.70197158E12, 1429842.4], [1.7019717E12, 5295.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70197164E12, 1488.0], [1.70197158E12, 558.0], [1.7019717E12, 2.066666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7019717E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11340.818518518521, "minX": 1.70197158E12, "maxY": 93258.0, "series": [{"data": [[1.70197164E12, 31386.621399176965], [1.70197158E12, 11340.818518518521], [1.7019717E12, 93258.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7019717E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7725.3592592592595, "minX": 1.70197158E12, "maxY": 30504.0, "series": [{"data": [[1.70197164E12, 12552.120713305912], [1.70197158E12, 7725.3592592592595], [1.7019717E12, 30504.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7019717E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 249.0, "minX": 1.70197158E12, "maxY": 1170.7448559670777, "series": [{"data": [[1.70197164E12, 1170.7448559670777], [1.70197158E12, 524.0037037037036], [1.7019717E12, 249.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7019717E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1299.0, "minX": 1.70197158E12, "maxY": 93258.0, "series": [{"data": [[1.70197164E12, 80824.0], [1.70197158E12, 23127.0], [1.7019717E12, 93258.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70197164E12, 19654.0], [1.70197158E12, 1299.0], [1.7019717E12, 93258.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70197164E12, 43118.9], [1.70197158E12, 20080.4], [1.7019717E12, 93258.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70197164E12, 51841.70999999989], [1.70197158E12, 22716.790000000008], [1.7019717E12, 93258.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70197164E12, 30925.5], [1.70197158E12, 10156.0], [1.7019717E12, 93258.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70197164E12, 44667.299999999996], [1.70197158E12, 20964.899999999998], [1.7019717E12, 93258.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7019717E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2754.5, "minX": 1.0, "maxY": 58692.0, "series": [{"data": [[2.0, 14756.5], [34.0, 26149.0], [35.0, 27915.0], [36.0, 28613.0], [38.0, 29221.0], [44.0, 30691.0], [46.0, 29268.5], [48.0, 25322.0], [3.0, 44973.0], [52.0, 32733.0], [4.0, 38085.0], [70.0, 33124.5], [5.0, 13727.5], [6.0, 11820.0], [7.0, 39659.0], [11.0, 6405.0], [12.0, 8088.0], [14.0, 15969.0], [1.0, 58692.0], [17.0, 18128.5], [20.0, 2754.5], [23.0, 5148.0], [24.0, 18696.0], [25.0, 43738.0], [26.0, 36003.0], [28.0, 20425.5], [31.0, 27624.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[48.0, 21045.0], [26.0, 34336.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 42581.0, "series": [{"data": [[2.0, 7366.5], [34.0, 10895.0], [35.0, 9016.0], [36.0, 9062.0], [38.0, 8904.0], [44.0, 10772.5], [46.0, 9171.0], [48.0, 9886.0], [3.0, 10422.0], [52.0, 9056.0], [4.0, 9667.0], [70.0, 8890.5], [5.0, 8590.0], [6.0, 6584.5], [7.0, 10152.0], [11.0, 5602.0], [12.0, 6538.0], [14.0, 8713.0], [1.0, 8962.0], [17.0, 12123.5], [20.0, 2486.5], [23.0, 4880.5], [24.0, 10142.5], [25.0, 42581.0], [26.0, 9100.0], [28.0, 11523.5], [31.0, 9349.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[48.0, 0.0], [26.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 70.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.70197158E12, "maxY": 16.666666666666668, "series": [{"data": [[1.70197158E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70197158E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70197158E12, "maxY": 12.0, "series": [{"data": [[1.70197164E12, 12.0], [1.70197158E12, 4.5], [1.7019717E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70197164E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.70197164E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7019717E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70197158E12, "maxY": 12.0, "series": [{"data": [[1.70197164E12, 12.0], [1.70197158E12, 4.5], [1.7019717E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70197164E12, 0.15]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7019717E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70197158E12, "maxY": 12.0, "series": [{"data": [[1.70197164E12, 12.0], [1.70197158E12, 4.5], [1.7019717E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70197164E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7019717E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

